"""Telegram client service for account registration"""

import os
import logging
import asyncio
from typing import Optional, Dict, Tuple, List, Callable
from telethon import TelegramClient
from telethon.errors import (
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    SessionPasswordNeededError,
    FloodWaitError,
    PhoneNumberBannedError,
    ApiIdInvalidError
)
from config import Config
from services.getsms import GetSMSAPI
from services.proxy_manager import ProxyManager

logger = logging.getLogger(__name__)

class TelegramAccountRegistrator:

    def __init__(self):
        self.config = Config()
        self.getsms = GetSMSAPI(self.config.GETSMS_API_KEY)
        self.proxy_manager = ProxyManager()

    async def register_account_with_callback(self, country_id: str = "0", proxy_string: Optional[str] = None,
                                           first_name: str = "User", last_name: str = "Telegram",
                                           log_callback: Optional[Callable] = None) -> Dict:
        def log(message: str):
            logger.info(message)
            if log_callback:
                log_callback(message)

        result = {
            'status': 'error',
            'message': 'Unknown error',
            'phone': None,
            'session_file': None,
            'proxy_used': proxy_string,
            'first_name': first_name,
            'last_name': last_name,
            'steps': []
        }

        client = None
        order_id = None

        try:
            log('üìû –ü–æ–∫—É–ø–∞—é –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...')
            phone, order_id = await self.getsms.get_number(country_id)

            if not phone or not order_id:
                log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç GetSMS')
                result['message'] = 'Failed to get phone number from GetSMS'
                return result

            result['phone'] = phone
            log(f'‚úÖ –ö—É–ø–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}')

            proxy_config = None
            if proxy_string:
                log(f'üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–æ–∫—Å–∏: {proxy_string.split(":")[0]}:***')
                proxy_config = self.proxy_manager.get_proxy_config(proxy_string)
                if not proxy_config:
                    log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏')
                    result['message'] = 'Invalid proxy configuration'
                    return result
                log('‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ')

            log('üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏...')
            session_name = f"session_{phone.replace('+', '')}"
            session_path = os.path.join(self.config.SESSION_DIR, session_name)

            log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∫–ª–∏–µ–Ω—Ç Telegram...')
            if proxy_config:
                client = TelegramClient(
                    session_path,
                    self.config.API_ID,
                    self.config.API_HASH,
                    proxy=proxy_config
                )
                log("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–æ–∫—Å–∏")
            else:
                client = TelegramClient(
                    session_path,
                    self.config.API_ID,
                    self.config.API_HASH
                )
                log("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–æ–∫—Å–∏")

            log('üåê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram...')
            await client.connect()
            log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

            log("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞...")
            if await client.is_user_authorized():
                log('‚ùå –ù–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram')
                result['status'] = 'error'
                result['message'] = 'Phone number already registered'
                return result

            log('üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ SMS –∫–æ–¥...')
            sent_code = await client.send_code_request(phone)
            log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')

            log('‚è≥ –ñ–¥—É SMS –∫–æ–¥ (3 –º–∏–Ω—É—Ç—ã)...')
            sms_code = await self.getsms.wait_for_sms(order_id, timeout=180)

            if not sms_code:
                log('‚ùå SMS –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª –∑–∞ 3 –º–∏–Ω—É—Ç—ã - –æ—Ç–º–µ–Ω—è—é –∑–∞–∫–∞–∑')
                await self.getsms.finish_order(order_id)
                result['message'] = 'SMS code timeout - order cancelled'
                return result

            log(f'‚úÖ –ü–æ–ª—É—á–∏–ª SMS –∫–æ–¥: {sms_code}')

            try:
                log('üîë –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∞–∫–∫–∞—É–Ω—Ç —Å SMS –∫–æ–¥–æ–º...')
                await client.sign_up(code=sms_code, first_name=first_name, last_name=last_name)
                log(f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {first_name} {last_name}!')

                me = await client.get_me()

                result['status'] = 'success'
                result['message'] = f'Account registered successfully as {first_name} {last_name}'
                result['session_file'] = f"{session_name}.session"
                log(f'üåü –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ID: {me.id}')

                return result

            except SessionPasswordNeededError:
                log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                result['message'] = 'Account has 2FA enabled'
                return result

            except PhoneCodeInvalidError:
                log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥')
                result['message'] = 'Invalid SMS code'
                return result

        except PhoneNumberInvalidError:
            log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            result['message'] = 'Invalid phone number'

        except PhoneNumberBannedError:
            log('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram')
            result['message'] = 'Phone number is banned'

        except ApiIdInvalidError:
            log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API ID –∏–ª–∏ Hash')
            result['message'] = 'Invalid API ID or Hash'

        except FloodWaitError as e:
            log(f'‚ùå Telegram FloodWait: –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥')
            result['message'] = f'Flood wait: {e.seconds} seconds'

        except Exception as e:
            log(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')
            result['message'] = f'Registration failed: {str(e)}'

        finally:
            if client and hasattr(client, 'disconnect'):
                try:
                    if client.is_connected():
                        await client.disconnect()
                        log("‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram –æ—Ç–∫–ª—é—á–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

            if order_id and result['status'] != 'success':
                try:
                    await self.getsms.finish_order(order_id)
                    log(f"‚úÖ –ó–∞–∫–∞–∑ SMS {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")

        return result

    async def register_multiple_accounts_parallel(self, count: int, country_id: str = "0", 
                                                first_name: str = "User", last_name: str = "Telegram",
                                                log_callback: Optional[Callable] = None) -> List[Dict]:
        def log(message: str):
            logger.info(message)
            if log_callback:
                log_callback(message)

        if count > self.config.MAX_ACCOUNTS_PER_BATCH:
            count = self.config.MAX_ACCOUNTS_PER_BATCH

        log("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–∫—Å–∏...")
        await self.proxy_manager.load_proxies()

        if not self.proxy_manager.proxies:
            log("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
            return []

        log(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é {len(self.proxy_manager.proxies)} –ø—Ä–æ–∫—Å–∏...")
        await self.proxy_manager.test_all_proxies()

        working_count = len(self.proxy_manager.working_proxies)
        log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {working_count} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")

        if working_count < count:
            log(f"‚ö†Ô∏è –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ ({working_count}) –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({count})")
            count = working_count

        if count == 0:
            log("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return []

        selected_proxies = []
        available_proxies = self.proxy_manager.working_proxies.copy()

        for i in range(count):
            if available_proxies:
                proxy = available_proxies.pop(0)
                selected_proxies.append(proxy)
                log(f"üîó –ê–∫–∫–∞—É–Ω—Ç #{i+1} –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {proxy.split(':')[0]}:***")
            else:
                log(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ #{i+1}")
                break

        log(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {len(selected_proxies)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        tasks = []
        for i, proxy in enumerate(selected_proxies):
            account_num = i + 1

            def make_account_log_callback(account_number):
                def account_log(message):
                    log(f"[–ê–∫–∫–∞—É–Ω—Ç #{account_number}] {message}")
                return account_log

            account_log_callback = make_account_log_callback(account_num)

            task = asyncio.create_task(
                self.register_account_with_callback(
                    country_id=country_id,
                    proxy_string=proxy,
                    first_name=first_name,
                    last_name=last_name,
                    log_callback=account_log_callback
                )
            )
            tasks.append(task)

        log("‚è≥ –ñ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π...")
        results = await asyncio.gather(*tasks, return_exceptions=True)

        successful = 0
        failed = 0
        final_results = []

        for i, result in enumerate(results):
            if isinstance(result, Exception):
                log(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç #{i+1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {str(result)}")
                final_results.append({
                    'status': 'error',
                    'message': str(result),
                    'phone': None,
                    'account_number': i+1
                })
                failed += 1
            elif isinstance(result, dict):
                result['account_number'] = i+1
                final_results.append(result)
                if result['status'] == 'success':
                    successful += 1
                    log(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç #{i+1} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {result['phone']}")
                else:
                    failed += 1
                    log(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç #{i+1} –Ω–µ —É–¥–∞–ª—Å—è: {result['message']}")

        log(f"üèÅ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –Ω–µ—É–¥–∞—á–Ω–æ")
        return final_results

    async def register_account(self, country_id: str = "0", proxy_string: Optional[str] = None) -> Dict:
        return await self.register_account_with_callback(country_id, proxy_string)

    async def register_account_with_name(self, country_id: str = "0", proxy_string: Optional[str] = None,
                                       first_name: str = "User", last_name: str = "Telegram") -> Dict:
        return await self.register_account_with_callback(country_id, proxy_string, first_name, last_name)

    async def register_multiple_accounts(self, count: int, country_id: str = "0", use_proxies: bool = True) -> List[Dict]:
        if use_proxies:
            return await self.register_multiple_accounts_parallel(count, country_id)
        else:
            results = []
            for i in range(count):
                result = await self.register_account_with_callback(country_id, None)
                results.append(result)
            return results