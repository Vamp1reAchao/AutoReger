import os
import json
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.keyboards import (
    get_main_menu,
    get_proxy_choice_keyboard,
    get_proxy_management_keyboard,
    get_back_keyboard,
    get_cancel_keyboard,
    get_confirmation_keyboard,
    get_country_keyboard
)
from bot.states import RegistrationStates, ProxyStates, CountryStates
from services.getsms import GetSMSAPI
from services.telegram_client import TelegramAccountRegistrator
from services.proxy_manager import ProxyManager
from config import Config
from utils.validators import validate_country_id
import asyncio

logger = logging.getLogger(__name__)

config = Config()
getsms = GetSMSAPI(config.GETSMS_API_KEY)
registrator = TelegramAccountRegistrator()
proxy_manager = ProxyManager()

router = Router()

def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_ID

async def send_session_file(bot, chat_id: int, session_file: str):
    session_path = os.path.join(config.SESSION_DIR, session_file)
    if os.path.exists(session_path):
        try:
            document = FSInputFile(session_path, filename=session_file)
            await bot.send_document(chat_id, document, caption=f"üìÅ Session file: {session_file}")
        except Exception as e:
            logger.error(f"Failed to send session file: {e}")
            await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome_text = (
        "üöÄ <b>AutoReger - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "‚ö° –ë—ã—Å—Ç—Ä–æ ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\nüí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RegerAiogram\nüéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "register_accounts")
async def register_accounts_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationStates.waiting_for_country)

    text = (
        "üéØ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ <code>ID —Å—Ç—Ä–∞–Ω—ã</code> –∏–ª–∏ <code>0</code> –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID</i>"
    )

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(RegistrationStates.waiting_for_country)
async def process_country_input(message: Message, state: FSMContext):
    if not message.text or not validate_country_id(message.text.strip()):
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å—Ç—Ä–∞–Ω—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\nüí° –ü—Ä–∏–º–µ—Ä: <code>7</code> –¥–ª—è –†–æ—Å—Å–∏–∏ –∏–ª–∏ <code>0</code> –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω—ã",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        return

    country_id = message.text.strip()

    loading_msg = await message.answer(
        "üîç <b>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...</b>\n\nüí∞ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\nüåç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )

    try:
        price, country_name = await getsms.get_price_and_country_name(country_id)

        await state.update_data(country_id=country_id, price=price, country_name=country_name)
        await state.set_state(RegistrationStates.waiting_for_count)

        text = (
            f"‚úÖ <b>–°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞:</b> <code>{price:.2f}‚ÇΩ</code>\n\n"
            f"üìä <b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç <code>1</code> –¥–æ <code>{config.MAX_ACCOUNTS_PER_BATCH}</code>\n\n"
            f"üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</i>"
        )

        await loading_msg.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )

    except Exception as e:
        logger.error(f"Failed to get price: {e}")
        await loading_msg.edit_text(
            f"üö´ <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n‚ö†Ô∏è {str(e)}\n\nüí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n‚Ä¢ –î—Ä—É–≥–æ–π ID —Å—Ç—Ä–∞–Ω—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å GetSMS\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )

@router.message(RegistrationStates.waiting_for_count)
async def process_count_selection(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\nüí° –ü—Ä–∏–º–µ—Ä: <code>5</code> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        return

    count = int(message.text.strip())

    if count < 1 or count > config.MAX_ACCOUNTS_PER_BATCH:
        await message.answer(
            f"‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!</b>\n\nüìä –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: <code>1-{config.MAX_ACCOUNTS_PER_BATCH}</code>\nüí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML"
        )
        return

    data = await state.get_data()
    price = data.get('price', 0)
    country_name = data.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    total_cost = price * count

    try:
        balance = await getsms.get_balance()
        can_afford = balance >= total_cost

        await state.update_data(count=count, total_cost=total_cost)
        await state.set_state(RegistrationStates.waiting_for_confirmation)
        await proxy_manager.load_proxies()
        proxy_stats = proxy_manager.get_stats()

        text = (
            f"üë®‚Äçüíª <b>developer:</b> <a href='https://t.me/AutoZelenka'>RW Project</a>\n"
            f"üìä <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
            f"üì± <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            f"üí∞ <b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä:</b> {price:.2f}‚ÇΩ\n"
            f"üí≥ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{total_cost:.2f}‚ÇΩ</code>\n"
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}‚ÇΩ</code>\n"
            f"{'‚úÖ' if can_afford else '‚ùå'} <b>–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:</b> {'–î–∞' if can_afford else '–ù–µ—Ç'}\n\n"
            f"üîß <b>–ü—Ä–æ–∫—Å–∏:</b> {proxy_stats.get('working_proxies', 0)} –¥–æ—Å—Ç—É–ø–Ω–æ\n"
        )

        if can_afford:
            text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤:"
        else:
            text += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!"

        keyboard = get_confirmation_keyboard("registration") if can_afford else get_cancel_keyboard()

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Failed to check balance: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )

@router.callback_query(F.data == "confirm_registration")
async def start_registration(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country_id = data.get('country_id', '0')
    count = data.get('count', 1)
    country_name = data.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    await register_accounts_with_live_updates(
        callback.bot,
        callback.message,
        country_id,
        count,
        country_name,
        state
    )

async def register_accounts_with_live_updates(bot, message, country_id: str, count: int, country_name: str, state: FSMContext):
    successful_accounts = []
    failed_accounts = []
    current_logs = []

    def add_log(text: str):
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        current_logs.append(f"[{timestamp}] {text}")
        if len(current_logs) > 15:
            current_logs.pop(0)

    async def update_message():
        logs_text = "\n".join(current_logs[-10:]) if current_logs else "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."

        message_text = (
            f"üöÄ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {country_name}\n"
            f"üìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {count}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful_accounts)}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {len(failed_accounts)}\n\n"
            f"üìù <b>–õ–æ–≥–∏:</b>\n"
            f"<code>{logs_text}</code>"
        )

        try:
            await message.edit_text(message_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to update message: {e}")

    add_log("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    await update_message()

    def registration_log_callback(log_message: str):
        add_log(log_message)
        asyncio.create_task(update_message_safe())

    async def update_message_safe():
        try:
            await update_message()
        except Exception as e:
            logger.error(f"Failed to update message: {e}")

    try:
        results = await registrator.register_multiple_accounts_parallel(
            count=count,
            country_id=country_id,
            first_name="AutoZelenka",
            last_name="User",
            log_callback=registration_log_callback
        )

        for result in results:
            if result['status'] == 'success':
                successful_accounts.append(result)

                if result.get('session_file'):
                    add_log(f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ #{result.get('account_number', '?')}...")
                    await update_message()
                    await send_session_file(bot, message.chat.id, result['session_file'])
                    add_log("‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    await update_message()
            else:
                failed_accounts.append(result)

    except Exception as e:
        logger.error(f"Parallel registration failed: {e}")
        add_log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await update_message()

    await state.clear()
    add_log("üèÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await update_message()

    summary_text = (
        f"üèÅ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
        f"üìä <b>–ò—Ç–æ–≥–∏:</b>\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful_accounts)}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {len(failed_accounts)}\n"
        f"üìã –í—Å–µ–≥–æ: {count}\n\n"
    )

    if successful_accounts:
        summary_text += "üéâ <b>–£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
        for result in successful_accounts:
            summary_text += f"üì± <code>{result['phone']}</code> ‚úÖ\n"

    if failed_accounts:
        summary_text += "\n‚ùå <b>–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:</b>\n"
        for result in failed_accounts[:3]:
            phone = result.get('phone', '–ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω')
            summary_text += f"üì± {phone}: {result['message'][:50]}...\n"

        if len(failed_accounts) > 3:
            summary_text += f"... –∏ –µ—â–µ {len(failed_accounts) - 3} –æ—à–∏–±–æ–∫\n"

    await message.edit_text(
        summary_text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

async def register_account_with_live_updates(country_id: str, proxy_string: str, first_name: str, last_name: str, logger_callback):
    try:
        await logger_callback("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞...")
        phone, order_id = await getsms.get_number(country_id)

        if not phone or not order_id:
            await logger_callback("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä")
            return {'status': 'error', 'message': 'Failed to get phone number', 'phone': None}

        await logger_callback(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {phone}")

        if proxy_string:
            await logger_callback("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏...")
            await logger_callback("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        await logger_callback("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
        await logger_callback("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        await logger_callback("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")

        result = await registrator.register_account_with_name(
            country_id=country_id,
            proxy_string=proxy_string,
            first_name=first_name,
            last_name=last_name
        )

        if 'steps' in result:
            for step in result['steps']:
                await logger_callback(step)
                await asyncio.sleep(0.3)

        return result

    except Exception as e:
        await logger_callback(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return {'status': 'error', 'message': str(e), 'phone': None}


@router.callback_query(F.data == "check_balance")
async def check_balance(callback: CallbackQuery):
    try:
        balance = await getsms.get_balance()
        text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å GetSMS</b>\n\nüíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{balance}‚ÇΩ</code>"
    except Exception as e:
        logger.error(f"Failed to check balance: {e}")
        text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n{str(e)}"

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "export_countries")
async def export_countries(callback: CallbackQuery):
    await callback.message.edit_text(
        "üåç <b>–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω</b>\n\n‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML"
    )

    try:
        countries = await getsms.get_countries()

        if not countries:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω.",
                parse_mode="HTML",
                reply_markup=get_back_keyboard()
            )
            return

        countries_file = config.COUNTRIES_FILE
        with open(countries_file, 'w', encoding='utf-8') as f:
            json.dump(countries, f, ensure_ascii=False, indent=2)

        text_file = "data/countries.txt"
        with open(text_file, 'w', encoding='utf-8') as f:
            f.write("ID -- –°—Ç—Ä–∞–Ω–∞\n")
            f.write("-" * 20 + "\n")
            for country in countries:
                f.write(f"{country.get('id', 'N/A')} -- {country.get('name', 'N/A')}\n")

        document = FSInputFile(text_file, filename="countries.txt")
        await callback.message.answer_document(
            document,
            caption=f"üåç <b>–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω</b>\n\n–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: <code>{len(countries)}</code>",
            parse_mode="HTML"
        )

        await callback.message.edit_text(
            f"‚úÖ <b>–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω</b>\n\n–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: <code>{len(countries)}</code>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

    except Exception as e:
        logger.error(f"Failed to export countries: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

@router.callback_query(F.data == "manage_proxies")
async def manage_proxies(callback: CallbackQuery):
    loaded_count = await proxy_manager.load_proxies()
    stats = proxy_manager.get_stats()

    text = (
        f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{loaded_count}</code>\n"
        f"‚úÖ –†–∞–±–æ—á–∏—Ö: <code>{stats['working']}</code>\n"
        f"‚è≥ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: <code>{stats['used']}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_proxy_management_keyboard()
        )
    except Exception:
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_proxy_management_keyboard()
        )

@router.callback_query(F.data == "test_proxies")
async def test_proxies(callback: CallbackQuery):
    await callback.message.edit_text(
        "üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</b>\n\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏...",
        parse_mode="HTML"
    )

    try:
        loaded_count = await proxy_manager.load_proxies()

        if loaded_count == 0:
            await callback.message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=get_back_keyboard()
            )
            return

        await callback.message.edit_text(
            f"üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</b>\n\n‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {loaded_count} –ø—Ä–æ–∫—Å–∏...",
            parse_mode="HTML"
        )

        working_count = await proxy_manager.test_all_proxies()

        stats = proxy_manager.get_stats()

        text = (
            f"‚úÖ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{stats['total_loaded']}</code>\n"
            f"‚úÖ –†–∞–±–æ—á–∏—Ö: <code>{stats['working_proxies']}</code>\n"
            f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö: <code>{stats['total_loaded'] - stats['working_proxies']}</code>\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω–æ: <code>{stats['available_proxies']}</code>"
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

    except Exception as e:
        logger.error(f"Failed to test proxies: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

@router.callback_query(F.data == "proxy_stats")
async def proxy_stats(callback: CallbackQuery):
    try:
        await proxy_manager.load_proxies()
        stats = proxy_manager.get_stats()

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏</b>\n\n"
            f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{stats['total_loaded']}</code>\n"
            f"‚úÖ –†–∞–±–æ—á–∏—Ö: <code>{stats['working_proxies']}</code>\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{stats['used_proxies']}</code>\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω–æ: <code>{stats['available_proxies']}</code>"
        )

    except Exception as e:
        logger.error(f"Failed to get proxy stats: {e}")
        text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n{str(e)}"

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "reset_proxies")
async def reset_proxies(callback: CallbackQuery):
    proxy_manager.reset_used_proxies()

    await callback.message.edit_text(
        "‚úÖ <b>–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —Å–±—Ä–æ—à–µ–Ω</b>\n\n–í—Å–µ –ø—Ä–æ–∫—Å–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    try:
        balance = await getsms.get_balance()

        await proxy_manager.load_proxies()
        proxy_stats = proxy_manager.get_stats()

        session_files = 0
        if os.path.exists(config.SESSION_DIR):
            session_files = len([f for f in os.listdir(config.SESSION_DIR) if f.endswith('.session')])

        text = (
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üí∞ <b>GetSMS –±–∞–ª–∞–Ω—Å:</b> <code>{balance}‚ÇΩ</code>\n\n"
            f"üîß <b>–ü—Ä–æ–∫—Å–∏:</b>\n"
            f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <code>{proxy_stats['total_loaded']}</code>\n"
            f"‚úÖ –†–∞–±–æ—á–∏—Ö: <code>{proxy_stats['working_proxies']}</code>\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω–æ: <code>{proxy_stats['available_proxies']}</code>\n\n"
            f"üì± <b>–°–µ—Å—Å–∏–∏:</b> <code>{session_files}</code> —Ñ–∞–π–ª–æ–≤"
        )

    except Exception as e:
        logger.error(f"Failed to get stats: {e}")
        text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n{str(e)}"

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "upload_proxies")
async def upload_proxies(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProxyStates.waiting_for_proxy_file)

    await callback.message.edit_text(
        "üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>ip:port:username:password</code>\n\n"
        "–ü–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É.",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(ProxyStates.waiting_for_proxy_file, F.document)
async def process_proxy_file(message: Message, state: FSMContext):
    await state.clear()

    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏.",
            reply_markup=get_cancel_keyboard()
        )
        return

    try:
        file = await message.bot.get_file(message.document.file_id)
        if not file.file_path:
            raise Exception("Could not get file path")

        file_content = await message.bot.download_file(file.file_path)
        if not file_content:
            raise Exception("Could not download file")

        content = file_content.read().decode('utf-8')

        new_proxies = []
        for line in content.split('\n'):
            line = line.strip()
            if line and not line.startswith('#'):
                new_proxies.append(line)

        existing_proxies = []
        try:
            with open(config.PROXY_FILE, 'r', encoding='utf-8') as f:
                for line in f.readlines():
                    line = line.strip()
                    if line and not line.startswith('#'):
                        existing_proxies.append(line)
        except FileNotFoundError:
            pass

        all_proxies = list(set(existing_proxies + new_proxies))

        with open(config.PROXY_FILE, 'w', encoding='utf-8') as f:
            f.write("# Proxy file format: ip:port:username:password\n")
            f.write("# Example:\n")
            f.write("# 192.168.1.1:8080:user:pass\n")
            f.write("# 10.0.0.1:3128:admin:secret\n\n")
            f.write("# Add your proxies below (one per line)\n")
            f.write("# Lines starting with # are ignored\n\n")
            for proxy in all_proxies:
                f.write(f"{proxy}\n")

        loaded_count = await proxy_manager.load_proxies()

        added_count = len(new_proxies)
        valid_new = [p for p in new_proxies if p in proxy_manager.proxies]

        text = (
            f"‚úÖ <b>–ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
            f"üìÅ –ù–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏: <code>{added_count}</code>\n"
            f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: <code>{len(valid_new)}</code>\n"
            f"üìä –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: <code>{loaded_count}</code>\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."
        )

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

    except Exception as e:
        logger.error(f"Failed to process proxy file: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )

def register_handlers(dp):
    dp.include_router(router)